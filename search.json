[{"path":[]},{"path":"https://discindo.github.io/r2lambda/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://discindo.github.io/r2lambda/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://discindo.github.io/r2lambda/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://discindo.github.io/r2lambda/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://discindo.github.io/r2lambda/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement teofiln@gmail.com. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://discindo.github.io/r2lambda/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://discindo.github.io/r2lambda/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://discindo.github.io/r2lambda/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://discindo.github.io/r2lambda/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://discindo.github.io/r2lambda/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://discindo.github.io/r2lambda/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://discindo.github.io/r2lambda/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://discindo.github.io/r2lambda/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://discindo.github.io/r2lambda/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://discindo.github.io/r2lambda/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://discindo.github.io/r2lambda/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://discindo.github.io/r2lambda/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://discindo.github.io/r2lambda/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://discindo.github.io/r2lambda/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://discindo.github.io/r2lambda/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://discindo.github.io/r2lambda/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://discindo.github.io/r2lambda/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://discindo.github.io/r2lambda/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://discindo.github.io/r2lambda/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://discindo.github.io/r2lambda/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://discindo.github.io/r2lambda/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://discindo.github.io/r2lambda/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://discindo.github.io/r2lambda/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://discindo.github.io/r2lambda/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://discindo.github.io/r2lambda/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://discindo.github.io/r2lambda/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://discindo.github.io/r2lambda/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://discindo.github.io/r2lambda/articles/lambda-s3.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"AWS Lambda and S3 integration","text":"end tutorial, created AWS Lambda function fetches -recent Tidytuesday dataset writes S3 Bucket every Wednesday. , ’ll first work interactively r2lambda paws go steps Lambda function eventually need , wrap code deploy AWS Lambda, finally schedule run weekly.","code":""},{"path":"https://discindo.github.io/r2lambda/articles/lambda-s3.html","id":"getting-started-with-aws-simple-storage-service-s3-from-r","dir":"Articles","previous_headings":"","what":"Getting started with AWS Simple Storage Service (S3) from R","title":"AWS Lambda and S3 integration","text":"AWS service supported paws, can easily connect S3 perform basic operations. , establish S3 service using r2lambda::aws_connect, create bucket called tidytuesday-dataset, drop delete empty file, delete bucket altogether. exercise meaningful beyond learning basics interact S3 R. Eventually, though, lambda function need something similar, familiar process interactive session helps. run code , need environmental variables set. See Setup section r2lambda package readme details Now, procedure used local file, generated data session, want stream directly S3 without saving file? many cases, don’t option write disk simply don’t want . cases need serialize data object trying put bucket. comes calling serialize connection=NULL generate raw vector without writing file. can put iris data set memory -unique-bucket S3 bucket. OK. , now know two steps Lambda function need : fetch recent Tidytuesday data set (see post details) put data set object S3 bucket Still interactive session, lets just write code Lambda execute. Now everything need write Lambda function.","code":"s3_service <- aws_connect(\"s3\")  # create a bucket on S3 s3_service$create_bucket(Bucket = \"a-unique-bucket\")  # upload an object to our bucket tmpfile <- tempfile(pattern = \"object_\", fileext = \"txt\") write(\"test\", tmpfile) (readLines(tmpfile)) s3_service$put_object(Body = tmpfile, Bucket = \"a-unique-bucket\", Key = \"TestFile\")  # list the contents of a bucket s3_service$list_objects(Bucket = \"a-unique-bucket\")  # delete an object from a bucket s3_service$delete_object(Bucket = \"a-unique-bucket\", Key = \"TestFile\")  # delete a bucket s3_service$delete_bucket(Bucket = \"a-unique-bucket\") s3_service <- aws_connect(\"s3\")  # create a bucket on S3 s3_service$create_bucket(Bucket = \"a-unique-bucket\")  # upload an object to our bucket siris <- serialize(iris, connection = NULL) s3_service$put_object(Body = siris, Bucket = \"a-unique-bucket\", Key = \"TestFile2\")  # list the contents of a bucket s3_service$list_objects(Bucket = \"a-unique-bucket\")  # delete an object from a bucket s3_service$delete_object(Bucket = \"a-unique-bucket\", Key = \"TestFile2\")  # delete a bucket s3_service$delete_bucket(Bucket = \"a-unique-bucket\") library(tidytuesdayR)  # Find the most recent tuesday and fetch the corresponding data set most_recent_tuesday <- tidytuesdayR::last_tuesday(date = Sys.Date()) tt_data <- tidytuesdayR::tt_load(x = most_recent_tuesday)  # by default it comes as class `tt_data`, which causes problems # with serialization and conversion to JSON. So best to extract # the data set(s) as a simple list tt_data <- lapply(names(tt_data), function(x) tt_data[[x]])  # then serialize tt_data_raw <- serialize(tt_data, connection = NULL)  # create a bucket on S3 s3_service <- r2lambda::aws_connect(\"s3\") s3_service$create_bucket(Bucket = \"tidytuesday-datasets\")  # upload an object to our bucket s3_service$put_object(   Body = tt_data_raw,    Bucket = \"tidytuesday-datasets\",    Key = most_recent_tuesday )  # list the contents of our bucket and find the Keys for all objects objects <- s3_service$list_objects(Bucket = \"tidytuesday-datasets\") sapply(objects$Contents, \"[[\", \"Key\") #> [1] \"2023-03-07\"  # fetch a Tidytuesday dataset from S3 tt_dataset <- s3_service$get_object(   Bucket = \"tidytuesday-datasets\",    Key = most_recent_tuesday )  # convert from raw and show the first few rows tt_dataset$Body |> unserialize() |> head()"},{"path":"https://discindo.github.io/r2lambda/articles/lambda-s3.html","id":"lambda-s3-integration-dropping-a-file-in-an-s3-bucket","dir":"Articles","previous_headings":"","what":"Lambda + S3 integration: Dropping a file in an S3 bucket","title":"AWS Lambda and S3 integration","text":"Wrapping interactive code function also, defining s3_connect function helper create S3 client within function. , avoid adding r2lambda dependency Lambda function. (time writing, r2lambda yet support non-CRAN packages.) Now, calling tidytuesday_lambda_s3() fetch put recent Tidytuesday data set S3 bucket. test , run: next step, create deploy Lambda function. considerations : dependencies need available docker image. already saw install tidytuesdayR Lambda docker image previous post. Besides , also need install paws, without can’t interact S3. , just need add dependencies = c(\"tidytuesdayR\", \"paws\") building image r2lambda::build_lambda.  Lambda function connect S3, needs access environmental variables. ones current interactive session without can’t establish local clients AWS services. : REGION, PROFILE, SECRET_ACCESS_KEY, ACCESS_KEY_ID. include envvars Lambda docker image deploy, use set_aws_envvars argument deploy_lambda.","code":"tidytuesday_lambda_s3 <- function() {   most_recent_tuesday <- tidytuesdayR::last_tuesday(date = Sys.Date())   tt_data <- tidytuesdayR::tt_load(x = most_recent_tuesday)   tt_data <- lapply(names(tt_data), function(x) tt_data[[x]])   tt_data_raw <- serialize(tt_data, connection = NULL)      s3_service <- paws::s3()   s3_service$put_object(Body = tt_data_raw,                         Bucket = \"tidytuesday-datasets\",                         Key = most_recent_tuesday) } tidytuesday_lambda_s3()  list_objects <- function(bucket) {   s3 <- s3_connect()   obj <- s3$list_objects(Bucket = bucket)   sapply(obj$Contents, \"[[\", \"Key\") }  list_objects(\"tidytuesday-datasets\") #> [1] \"2023-03-07\""},{"path":"https://discindo.github.io/r2lambda/articles/lambda-s3.html","id":"build","dir":"Articles","previous_headings":"Lambda + S3 integration: Dropping a file in an S3 bucket","what":"Build","title":"AWS Lambda and S3 integration","text":"","code":"r_code <- \"   s3_connect <- function() {     paws::s3(config = list(       credentials = list(         creds = list(           access_key_id = Sys.getenv('ACCESS_KEY_ID'),           secret_access_key = Sys.getenv('SECRET_ACCESS_KEY')         ),         profile = Sys.getenv('PROFILE')       ),       region = Sys.getenv('REGION')     ))   }      tidytuesday_lambda_s3 <- function() {     most_recent_tuesday <- tidytuesdayR::last_tuesday(date = Sys.Date())     tt_data <- tidytuesdayR::tt_load(x = most_recent_tuesday)     tt_data <- lapply(names(tt_data), function(x) tt_data[[x]])     tt_data_raw <- serialize(tt_data, connection = NULL)          s3_service <- s3_connect()     s3_service$put_object(Body = tt_data_raw,                           Bucket = 'tidytuesday-datasets',                           Key = most_recent_tuesday)   }      lambdr::start_lambda() \"  tmpfile <- tempfile(pattern = \"tt_lambda_s3_\", fileext = \".R\") write(x = r_code, file = tmpfile) runtime_function <- \"tidytuesday_lambda_s3\" runtime_path <- tmpfile dependencies <- c(\"tidytuesdayR\", \"paws\")  r2lambda::build_lambda(   tag = \"tidytuesday_lambda_s3\",   runtime_function = runtime_function,   runtime_path = runtime_path,   dependencies = dependencies )"},{"path":"https://discindo.github.io/r2lambda/articles/lambda-s3.html","id":"deploy","dir":"Articles","previous_headings":"Lambda + S3 integration: Dropping a file in an S3 bucket","what":"Deploy","title":"AWS Lambda and S3 integration","text":"set generous 2 minute timeout, just safe data set successfully copied S3. also increase available memory 1024 mb. Note also flag pass along local AWS envvars deployed lambda environment.","code":"r2lambda::deploy_lambda(   tag = \"tidytuesday_lambda_s3\",   set_aws_envvars = TRUE,   Timeout = 120,   MemorySize = 1024)"},{"path":"https://discindo.github.io/r2lambda/articles/lambda-s3.html","id":"invoke","dir":"Articles","previous_headings":"Lambda + S3 integration: Dropping a file in an S3 bucket","what":"Invoke","title":"AWS Lambda and S3 integration","text":"invoke usual, empty list payload function take arguments. , confirm Tidytuesday data set written S3 object bucket tidytuesday-datasets run: expect see one object Key matching date recent Tuesday. time writing March 7, 2023.","code":"r2lambda::invoke_lambda(   function_name = \"tidytuesday_lambda_s3\",    invocation_type = \"RequestResponse\",    payload = list(),   include_logs = TRUE)  #> INFO [2023-03-08 23:50:46] [invoke_lambda] Validating inputs. #> INFO [2023-03-08 23:50:46] [invoke_lambda] Checking function state. #> INFO [2023-03-08 23:50:47] [invoke_lambda] Function state: Active. #> INFO [2023-03-08 23:50:47] [invoke_lambda] Invoking function. #>  #> Lambda response payload:  #> {\"Expiration\":[],\"ETag\":\"\\\"4f5a6085215b9074faed28d816696a99\\\"\",\"ChecksumCRC32\":[], #> \"ChecksumCRC32C\":[],\"ChecksumSHA1\":[],\"ChecksumSHA256\":[],\"ServerSideEncryption\":\"AES256\", #> \"VersionId\":[],\"SSECustomerAlgorithm\":[],\"SSECustomerKeyMD5\":[],\"SSEKMSKeyId\":[], #> \"SSEKMSEncryptionContext\":[],\"BucketKeyEnabled\":[],\"RequestCharged\":[]} #>  #> Lambda logs:  #> OpenBLAS WARNING - could not determine the L2 cache size on this system, assuming 256k #> INFO [2023-03-09 05:50:49] Using handler function  tidytuesday_lambda_s3 #> START RequestId: c6cb0600-3400-4ca3-9232-8af53542f8e8 Version: $LATEST #> --- Compiling #TidyTuesday Information for 2023-03-07 ---- #> --- There is 1 file available --- #> --- Starting Download --- #> Downloading file 1 of 1: `numbats.csv` #> --- Download complete --- #> END RequestId: c6cb0600-3400-4ca3-9232-8af53542f8e8 #> REPORT RequestId: c6cb0600-3400-4ca3-9232-8af53542f8e8   Duration: 12061.06 ms    #> Billed Duration: 13331 ms    Memory Size: 1024 MB    Max Memory Used: 181 MB Init  #> Duration: 1269.59 ms  #> SUCCESS [2023-03-08 23:51:01] [invoke_lambda] Done. s3_service <- r2lambda::aws_connect(service = \"s3\") objs <- s3_service$list_objects(Bucket = \"tidytuesday-datasets\") objs$Contents[[1]]$Key #> [1] \"2023-03-07\""},{"path":"https://discindo.github.io/r2lambda/articles/lambda-s3.html","id":"schedule","dir":"Articles","previous_headings":"Lambda + S3 integration: Dropping a file in an S3 bucket","what":"Schedule","title":"AWS Lambda and S3 integration","text":"Finally, copy Tidytuesday dataset weekly basis, example, every Wednesday, use r2lambda::schedule_lambda execution rate set cron. First, validate things working, can set lambda 5-minute schedule check time stamp S3 object make sure updated every 5 minutes: well, set run every Wednesday midnight: Next Wednesday morning, two objects, keys matching two -recent Tuesdays.","code":"# schedule the lambda to execute every 5 minutes r2lambda::schedule_lambda(   lambda_function = \"tidytuesday_lambda_s3\",    execution_rate = \"rate(5 minutes)\"   )  # occasionally query the S3 bucket status and the LastModified time stamp objs <- s3_service$list_objects(Bucket = \"tidytuesday-datasets\") objs$Contents[[1]]$LastModified r2lambda::schedule_lambda(   lambda_function = \"tidytuesday_lambda_s3\",   execution_rate = \"cron(0 0 * * Wed *)\"   )"},{"path":[]},{"path":[]},{"path":"https://discindo.github.io/r2lambda/articles/schedule-lambda.html","id":"a-lambda-runtime-function","dir":"Articles","previous_headings":"","what":"A lambda runtime function","title":"Set an AWS lambda function to run on a schedule","text":"start simple function require input return anything. example lambda run schedule, don’t want worry input arguments. Also, want lambda function simply side-effect, like printing something logs, without returning data writing database. help us greatly setup, ’ll able deploy schedule lambda mininal involvement AWS services. mind, following function simply prints system time. Printing current time makes sense can easily check lambda runs correct schedule logs.","code":"current_time <- function() {   print(paste(\"CURRENT TIME: \", Sys.time())) }"},{"path":"https://discindo.github.io/r2lambda/articles/schedule-lambda.html","id":"build-test-and-deploy","dir":"Articles","previous_headings":"","what":"Build, test, and deploy","title":"Set an AWS lambda function to run on a schedule","text":", follow procedure described Tidy Tuesday dataset Lambda vignette. write file ’ll use build lambda docker image: build docker image. Note don’t dependencies base R. test lambda docker container locally, makes sense. console output include log messages standard output string showing current time. , deploy lambda AWS, leaving lambda environment defaults, 3 seconds enough get print current time. Finally, invoke cloud instance function, make sure everything went well. sure include logs, particular function return anything.","code":"r_code <- \"   current_time <- function() {     print(paste('CURRENT TIME:', Sys.time()))   }      lambdr::start_lambda() \"  tmpfile <- tempfile(pattern = \"current_time_lambda_\", fileext = \".R\") write(x = r_code, file = tmpfile) r2lambda::build_lambda(   tag = \"current_time\",   runtime_function = \"current_time\",   runtime_path = tmpfile,   dependencies = NULL ) r2lambda::test_lambda(tag = \"current_time\", payload = list()) r2lambda::deploy_lambda(tag = \"current_time\") r2lambda::invoke_lambda(   function_name = \"current_time\",   invocation_type = \"RequestResponse\",   payload = list(),   include_logs = TRUE )"},{"path":"https://discindo.github.io/r2lambda/articles/schedule-lambda.html","id":"schedule-to-run-every-minute","dir":"Articles","previous_headings":"","what":"Schedule to run every minute","title":"Set an AWS lambda function to run on a schedule","text":"make lambda function run recurring schedule, need update already deployed function. involves three steps two AWS services, Lambda EventBridge: creating schedule event role (EventBridge, paws::eventbridge) adding permissions role invoke lambda functions (Lambda, paws::lambda) adding target lambda function eventBridge Detailed instructions available AWS documentation. function schedule_lambda abstracts three steps one go. set lambda schedule, need name function wish update, rate want EventBridge invoke . Two rate-setting expression formats supported, cron rate. example, schedule lambda run every Sunday midnight, use execution_rate = \"cron(0 0 * * Sun)\". Alternatively, schedule lambda run every 15 minutes, might use execution_rate = \"rate(15 minutes)\". details article","code":"r2lambda::schedule_lambda(lambda_function = \"current_time\", execution_rate = \"rate(1 minute)\")"},{"path":"https://discindo.github.io/r2lambda/articles/schedule-lambda.html","id":"checking-the-aws-logs","dir":"Articles","previous_headings":"","what":"Checking the AWS logs","title":"Set an AWS lambda function to run on a schedule","text":"see function runs every minute, can take look AWS logs. function writing database, dropping files S3 bucket, also check contents resources effects scheduled lambda function. example function prints current time, way know indeed runs every minute check logs. , ’ll use paws r2lambda::aws_connect establish AWS CloudWatchLogs service locally, fetch recent logs look traces lambda function. first step, connect cloudwatchlogs fetch names log groups. Inspect logs object find name corresponding lambda function whose logs want fetch. , can grab data scheduled lambda function: pull message printed R function wrapped lambda:","code":"logs_service <- r2lambda::aws_connect(service = \"cloudwatchlogs\") logs <- logs_service$describe_log_groups() (logGroups <- sapply(logs$logGroups, \"[[\", 1)) current_time_lambda_logs <- logs_service$filter_log_events(   logGroupName = \"/aws/lambda/current_time\") messages <- sapply(current_time_lambda_logs$events, \"[[\", \"message\") current_time_messages <- messages[grepl(\"CURRENT TIME\", messages)] data.frame(Current_time_lambda = current_time_messages)  #>                         Current_time_lambda #> 1 [1] \"CURRENT TIME: 2023-02-26 22:53:55\"\\n #> 2 [1] \"CURRENT TIME: 2023-02-26 22:54:41\"\\n #> 3 [1] \"CURRENT TIME: 2023-02-26 22:55:41\"\\n #> 4 [1] \"CURRENT TIME: 2023-02-26 22:56:41\"\\n #> 5 [1] \"CURRENT TIME: 2023-02-26 22:57:41\"\\n"},{"path":"https://discindo.github.io/r2lambda/articles/schedule-lambda.html","id":"clean-up","dir":"Articles","previous_headings":"","what":"Clean up","title":"Set an AWS lambda function to run on a schedule","text":"don’t want let trivial lambda fire every minute, still incur cost. wise delete event schedule rule maybe even lambda function self. remove event rule, first need remove associated targets, remove rule. Finally, remove Lambda:","code":"# connect to the EventBridge service events_service <- r2lambda::aws_connect(\"eventbridge\") # find the names of all rules we need schedule_rules <- events_service$list_rules()[[1]] |> sapply(\"[[\", 1)  # find the targets associated with the rule we want to remove rule_to_remove <- schedule_rules[[1]]  target_arn_to_remove <- events_service$list_targets_by_rule(Rule = rule_to_remove)$Targets[[1]]$Id events_service$remove_targets(Rule = rule_to_remove, Ids = target_arn_to_remove) events_service$delete_rule(Name = rule_to_remove)  events_service$list_rules()[[1]] |> sapply(\"[[\", 1) lambda_service <- r2lambda::aws_connect(\"lambda\") lambda_service$list_functions()$Functions |> sapply(\"[[\",\"FunctionName\") lambda_service$delete_function(FunctionName = \"parity1\")"},{"path":"https://discindo.github.io/r2lambda/articles/tt-lambda.html","id":"use-r2lambda-to-download-tidytuesday-dataset","dir":"Articles","previous_headings":"","what":"Use {r2lambda} to download Tidytuesday dataset","title":"Tidy Tuesday dataset Lambda","text":"exercize, ’ll create AWS Lambda function downloads tidytuesday data set recent Tuesday (recent Tuesday date interest).","code":""},{"path":"https://discindo.github.io/r2lambda/articles/tt-lambda.html","id":"runtime-function","dir":"Articles","previous_headings":"","what":"Runtime function","title":"Tidy Tuesday dataset Lambda","text":"first step write runtime function. function executed invoke Lambda function deployed. download Tidytuesday data set, use tidytuesdayR package. runtime script, define function called tidytyesday_lambda takes one optional argument date. date omitted, function returns data set(s) recent Tuesday, otherwise, looks recent Tuesday date interest returns corresponding data set(s).","code":"library(tidytuesdayR)  tidytuesday_lambda <- function(date = NULL) {   if (is.null(date))     date <- Sys.Date()      most_recent_tuesday <- tidytuesdayR::last_tuesday(date = date)   tt_data <- tidytuesdayR::tt_load(x = most_recent_tuesday)   data_names <- names(tt_data)   data_list <- lapply(data_names, function(x) tt_data[[x]])   return(data_list) }  tidytuesday_lambda(\"2022-02-02\")"},{"path":"https://discindo.github.io/r2lambda/articles/tt-lambda.html","id":"r-script-to-build-the-lambda","dir":"Articles","previous_headings":"","what":"R script to build the lambda","title":"Tidy Tuesday dataset Lambda","text":"build lambda image, need R script sources required code, loads needed libraries, defines runtime function, ends call lambdr::start_lambda(). runtime function defined file. , example, source another script, load package set loaded function runtime function subsequent call r2lambda::build_lambda (see ). save script file record path:","code":"r_code <- \"   library(tidytuesdayR)    tidytuesday_lambda <- function(date = NULL) {     if (is.null(date))       date <- Sys.Date()          most_recent_tuesday <- tidytuesdayR::last_tuesday(date = date)     tt_data <- tidytuesdayR::tt_load(x = most_recent_tuesday)     data_names <- names(tt_data)     data_list <- lapply(data_names, function(x) tt_data[[x]])     return(data_list)   }      lambdr::start_lambda() \"  tmpfile <- tempfile(pattern = \"ttlambda_\", fileext = \".R\") write(x = r_code, file = tmpfile)"},{"path":[]},{"path":"https://discindo.github.io/r2lambda/articles/tt-lambda.html","id":"build","dir":"Articles","previous_headings":"Build, test, and deploy the lambda function","what":"1. Build","title":"Tidy Tuesday dataset Lambda","text":"set runtime_function argument name function wish docker container run invoked. case, tidytuesday_lambda. adds CMD instruction Dockerfile set runtime_path argument path stored script defining runtime function. set dependencies argument c(\"tidytuesdayR\")need tidytuesdayR package installed within docker container download dataset. steps adds RUN instruction Dockerfile calls install.packages install tidytuesdayR CRAN. Finally, tag argument sets name Lambda function ’ll use later test invoke function. tag argument also becomes name folder r2lambda create build image. folder two files, Dockerfile runtime.R. runtime.R script runtime_path, renamed copied docker image COPY instruction.","code":"runtime_function <- \"tidytuesday_lambda\" runtime_path <- tmpfile dependencies <- \"tidytuesdayR\"  r2lambda::build_lambda(   tag = \"tidytuesday3\",   runtime_function = runtime_function,   runtime_path = runtime_path,   dependencies = dependencies )"},{"path":"https://discindo.github.io/r2lambda/articles/tt-lambda.html","id":"test","dir":"Articles","previous_headings":"Build, test, and deploy the lambda function","what":"2. Test","title":"Tidy Tuesday dataset Lambda","text":"make sure Lambda docker container works intended, start locally, invoke test response. response list three elements: status, 0 test worked, stdout, standard output stream invocation, stderr, standard error stream invocation stdout stderr raw vectors need parse, example: stdout slot response returns correct output function, good deploy AWS.","code":"response <- r2lambda::test_lambda(tag = \"tidytuesday3\", payload = list(date = Sys.Date())) rawToChar(response$stdout)"},{"path":"https://discindo.github.io/r2lambda/articles/tt-lambda.html","id":"deploy","dir":"Articles","previous_headings":"Build, test, and deploy the lambda function","what":"3. Deploy","title":"Tidy Tuesday dataset Lambda","text":"deploy step simple, need specify name (tag) Lambda function wish push AWS ECR. deploy_lambda function also accepts ..., named arguments ultimately passed onto paws.compute:::lambda_create_function. function calls Lambda API. see available arguments run ?paws.compute:::lambda_create_function. important arguments probably Timeout MemorySize, set time function allowed run amount memory available. many cases make sense increase defaults 3 seconds 128 mb.","code":"r2lambda::deploy_lambda(tag = \"tidytuesday3\", Timeout = 30)"},{"path":"https://discindo.github.io/r2lambda/articles/tt-lambda.html","id":"invoke","dir":"Articles","previous_headings":"Build, test, and deploy the lambda function","what":"4. Invoke","title":"Tidy Tuesday dataset Lambda","text":"goes well, function now available cloud awaiting requests. can invoke R using invoke_lambda. arguments : function_name – name function invocation_type – typically RequestResponse include_log – whether print logs run console payload – named list arguments sent runtime_function. case, runtime function, tidytuesday_lambda single argument date, corresponding list list(date = Sys.Date()). function can called without argument, can also send empty list payload. Just like local test, response payload comes raw vector needs parsed data.frame:","code":"response <- r2lambda::invoke_lambda(   function_name = \"tidytuesday3\",   invocation_type = \"RequestResponse\",   payload = list(),   include_logs = TRUE ) tidytuesday_dataset <- response$Payload |>    rawToChar() |>    jsonlite::fromJSON(simplifyDataFrame = TRUE)  tidytuesday_dataset[[1]][1:5, 1:5]"},{"path":"https://discindo.github.io/r2lambda/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Teofil Nakov. Author, maintainer.","code":""},{"path":"https://discindo.github.io/r2lambda/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Nakov T (2024). r2lambda: Deploy R Scripts AWS Lambda Functions. R package version 0.1.0, https://discindo.github.io/r2lambda/.","code":"@Manual{,   title = {r2lambda: Deploy R Scripts as AWS Lambda Functions},   author = {Teofil Nakov},   year = {2024},   note = {R package version 0.1.0},   url = {https://discindo.github.io/r2lambda/}, }"},{"path":"https://discindo.github.io/r2lambda/index.html","id":"r2lambda","dir":"","previous_headings":"","what":"Deploy R Scripts as AWS Lambda Functions","title":"Deploy R Scripts as AWS Lambda Functions","text":"goal r2lambda make easier go R script deployed AWS Lambda function.","code":""},{"path":"https://discindo.github.io/r2lambda/index.html","id":"requirements","dir":"","previous_headings":"","what":"Requirements","title":"Deploy R Scripts as AWS Lambda Functions","text":"docker required build, tag, push image.","code":""},{"path":"https://discindo.github.io/r2lambda/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Deploy R Scripts as AWS Lambda Functions","text":"can install development version r2lambda like :","code":"# install_packages(\"remotes\") remotes::install_github(\"discindo/r2lambda\")"},{"path":"https://discindo.github.io/r2lambda/index.html","id":"setup","dir":"","previous_headings":"","what":"Setup","title":"Deploy R Scripts as AWS Lambda Functions","text":"r2lambda assumes credentials connecting AWS services available R session. can done via .Renviron file set enironmental variables like : since r2lambda uses paws hood, authentication methods supported paws available r2lambda. See details setting credentials, region, profile, etc.","code":"AWS_ACCESS_KEY_ID = \"YOUR AWS ACCESS KEY ID\" AWS_SECRET_ACCESS_KEY = \"YOUR AWS SECRET ACCESS KEY\" AWS_PROFILE = \"YOUR AWS PROFILE\" AWS_REGION = \"YOUR AWS REGION\""},{"path":[]},{"path":"https://discindo.github.io/r2lambda/index.html","id":"build-a-docker-image-for-the-lambda-function","dir":"","previous_headings":"Workflow","what":"Build a docker image for the lambda function","title":"Deploy R Scripts as AWS Lambda Functions","text":"","code":"runtime_function <- \"parity\" runtime_path <- system.file(\"parity.R\", package = \"r2lambda\") dependencies <- NULL  # Might take a while, its building a docker image build_lambda(   tag = \"parity1\",   runtime_function = runtime_function,   runtime_path = runtime_path,   dependencies = dependencies )"},{"path":"https://discindo.github.io/r2lambda/index.html","id":"test-the-lambda-docker-image-locally","dir":"","previous_headings":"Workflow","what":"Test the lambda docker image locally","title":"Deploy R Scripts as AWS Lambda Functions","text":"","code":"payload <- list(number = 2) tag <- \"parity1\" test_lambda(tag = \"parity1\", payload)"},{"path":"https://discindo.github.io/r2lambda/index.html","id":"deploy-to-aws-lambda","dir":"","previous_headings":"Workflow","what":"Deploy to AWS Lambda","title":"Deploy R Scripts as AWS Lambda Functions","text":"","code":"# Might take a while, its pushing it to a remote repository deploy_lambda(tag = \"parity1\")"},{"path":"https://discindo.github.io/r2lambda/index.html","id":"invoke-deployed-lambda","dir":"","previous_headings":"Workflow","what":"Invoke deployed lambda","title":"Deploy R Scripts as AWS Lambda Functions","text":"","code":"invoke_lambda(   function_name = \"parity1\",   invocation_type = \"RequestResponse\",   payload = list(number = 2),   include_logs = FALSE )  #> Lambda response payload: #> {\"parity\":\"even\"}"},{"path":"https://discindo.github.io/r2lambda/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Deploy R Scripts as AWS Lambda Functions","text":"Please note r2lambda project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://discindo.github.io/r2lambda/reference/aws_connect.html","id":null,"dir":"Reference","previous_headings":"","what":"connect to an aws service — aws_connect","title":"connect to an aws service — aws_connect","text":"connect aws service","code":""},{"path":"https://discindo.github.io/r2lambda/reference/aws_connect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"connect to an aws service — aws_connect","text":"","code":"aws_connect(service)"},{"path":"https://discindo.github.io/r2lambda/reference/aws_connect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"connect to an aws service — aws_connect","text":"service character, name service, e.g., \"lambda\" \"iam\". function exported `paws` (see `getNamespaceExports(\"paws\")`)","code":""},{"path":"https://discindo.github.io/r2lambda/reference/aws_connect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"connect to an aws service — aws_connect","text":"","code":"if (FALSE) { # \\dontrun{ aws_connect(\"lambda\") } # }"},{"path":"https://discindo.github.io/r2lambda/reference/build_lambda.html","id":null,"dir":"Reference","previous_headings":"","what":"build and tag lambda image locally — build_lambda","title":"build and tag lambda image locally — build_lambda","text":"build tag lambda image locally","code":""},{"path":"https://discindo.github.io/r2lambda/reference/build_lambda.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"build and tag lambda image locally — build_lambda","text":"","code":"build_lambda(   tag,   runtime_function,   runtime_path,   renvlock_path = NULL,   dependencies = NULL )"},{"path":"https://discindo.github.io/r2lambda/reference/build_lambda.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"build and tag lambda image locally — build_lambda","text":"tag name Docker container Lambda function runtime_function name runtime function runtime_path path script containing runtime function renvlock_path path renv.lock file () dependencies list dependencies ()","code":""},{"path":"https://discindo.github.io/r2lambda/reference/build_lambda.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"build and tag lambda image locally — build_lambda","text":"Use either `renvlock_path` `dependencies` install required packages, . default, `NULL`, Docker image additional packages installed.","code":""},{"path":"https://discindo.github.io/r2lambda/reference/deploy_lambda.html","id":null,"dir":"Reference","previous_headings":"","what":"deploy a local lambda image to AWS Lambda — deploy_lambda","title":"deploy a local lambda image to AWS Lambda — deploy_lambda","text":"deploy local lambda image AWS Lambda","code":""},{"path":"https://discindo.github.io/r2lambda/reference/deploy_lambda.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"deploy a local lambda image to AWS Lambda — deploy_lambda","text":"","code":"deploy_lambda(tag, set_aws_envvars = FALSE, ...)"},{"path":"https://discindo.github.io/r2lambda/reference/deploy_lambda.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"deploy a local lambda image to AWS Lambda — deploy_lambda","text":"tag tag existing local image tagged ECR repo (see `build_lambda`) set_aws_envvars logical, whether set local AWS secrets deployed Lambda environment (default = `FALSE`). useful Lambda needs access AWS service. `TRUE`, following envvars set: `PROFILE`, `REGION`, `SECRET_ACCESS_KEY`, `ACCESS_KEY_ID`. fetched using `Sys.getenv()`. ... Arguments passed onto `create_lambda_function`","code":""},{"path":"https://discindo.github.io/r2lambda/reference/deploy_lambda.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"deploy a local lambda image to AWS Lambda — deploy_lambda","text":"","code":"if (FALSE) { # \\dontrun{    runtime_function <- \"parity\"   runtime_path <- system.file(\"parity.R\", package = \"r2lambda\")   dependencies <- NULL    build_lambda(     tag = \"myrepo52\",     runtime_function = runtime_function,     runtime_path = runtime_path,     dependencies = dependencies     )    deploy_lambda(tag = \"myrepo52\")    invoke_lambda(     function_name = \"myrepo52\",     payload = list(number = 3),     invocation_type = \"RequestResponse\"     )  } # }"},{"path":"https://discindo.github.io/r2lambda/reference/invoke_lambda.html","id":null,"dir":"Reference","previous_headings":"","what":"invoke a lambda function — invoke_lambda","title":"invoke a lambda function — invoke_lambda","text":"invoke lambda function","code":""},{"path":"https://discindo.github.io/r2lambda/reference/invoke_lambda.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"invoke a lambda function — invoke_lambda","text":"","code":"invoke_lambda(function_name, invocation_type, payload, include_logs = FALSE)"},{"path":"https://discindo.github.io/r2lambda/reference/invoke_lambda.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"invoke a lambda function — invoke_lambda","text":"function_name name arn function invocation_type One ‘DryRun’, ‘RequestResponse’, ‘Event’ see `?paws.compute::lambda_invoke` payload named list internally converted json include_logs logical, whether show lambda logs (default: FALSE)","code":""},{"path":"https://discindo.github.io/r2lambda/reference/invoke_lambda.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"invoke a lambda function — invoke_lambda","text":"","code":"if (FALSE) { # \\dontrun{   invoke_lambda(    function_name = \"parity\",    payload = list(number = 3),    invocation_type = \"RequestResponse\"   ) } # }"},{"path":"https://discindo.github.io/r2lambda/reference/schedule_lambda.html","id":null,"dir":"Reference","previous_headings":"","what":"Put a deployed lambda function on a schedule — schedule_lambda","title":"Put a deployed lambda function on a schedule — schedule_lambda","text":"Put deployed lambda function schedule","code":""},{"path":"https://discindo.github.io/r2lambda/reference/schedule_lambda.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Put a deployed lambda function on a schedule — schedule_lambda","text":"","code":"schedule_lambda(lambda_function, execution_rate)"},{"path":"https://discindo.github.io/r2lambda/reference/schedule_lambda.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Put a deployed lambda function on a schedule — schedule_lambda","text":"lambda_function character, name (tag) function. check done internally make sure Lambda exists fetch ARN. execution_rate character, rate run lambda function. Can use `rate` `cron` specification. details see official documentation: https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-create-rule-schedule.html","code":""},{"path":[]},{"path":"https://discindo.github.io/r2lambda/reference/test_lambda.html","id":null,"dir":"Reference","previous_headings":"","what":"test a lambda locally — test_lambda","title":"test a lambda locally — test_lambda","text":"test lambda locally","code":""},{"path":"https://discindo.github.io/r2lambda/reference/test_lambda.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"test a lambda locally — test_lambda","text":"","code":"test_lambda(tag, payload)"},{"path":"https://discindo.github.io/r2lambda/reference/test_lambda.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"test a lambda locally — test_lambda","text":"tag tag existing local image tagged ECR repo (see `build_lambda`) payload Named list. Arguments lambda function.","code":""},{"path":"https://discindo.github.io/r2lambda/reference/test_lambda.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"test a lambda locally — test_lambda","text":"","code":"if (FALSE) { # \\dontrun{   payload <- list(number = 2)   tag <- \"449283523352.dkr.ecr.us-east-1.amazonaws.com/myrepo51:latest\"   test_lambda(tag, payload) } # }"}]
